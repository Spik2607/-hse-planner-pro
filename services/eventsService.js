import { supabase } from "../lib/supabaseClient";

// üî• Lire tous les √©v√©nements
export const getEvents = async () => {
  const { data, error } = await supabase
    .from('events')
    .select('*')
    .order('event_date', { ascending: true });

  if (error) {
    console.error('Erreur r√©cup√©ration √©v√©nements :', error);
    return [];
  }
  return data;
};

// üî• Ajouter un √©v√©nement
export const addEvent = async (title, description, zone, priority, event_date) => {
  const { error } = await supabase
    .from('events')
    .insert([{ title, description, zone, priority, event_date }]);

  if (error) console.error('Erreur ajout √©v√©nement :', error);
};

// üî• Modifier un √©v√©nement
export const editEvent = async (id, updatedData) => {
  const { error } = await supabase
    .from('events')
    .update(updatedData)
    .eq('id', id);

  if (error) console.error('Erreur √©dition √©v√©nement :', error);
};

// üî• Supprimer un √©v√©nement
export const deleteEvent = async (id) => {
  const { error } = await supabase
    .from('events')
    .delete()
    .eq('id', id);

  if (error) console.error('Erreur suppression √©v√©nement :', error);
};
